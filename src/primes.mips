	.data
default_str: .asciiz ""
data_1: .asciiz "Object"
data_2: .asciiz "IO"
data_3: .asciiz "String"
data_4: .asciiz "Int"
data_5: .asciiz "Bool"
data_6: .asciiz "Main"
data_7: .asciiz "Abort called from class "
data_8: .asciiz "
"
data_9: .asciiz "Substring out of range"
data_10: .asciiz "2 is trivially prime.
"
data_11: .asciiz "(55,39) - RuntimeError: Division by zero
"
data_12: .asciiz " is prime.
"
data_13: .asciiz "halt"
data_14: .asciiz "(75,11) - RuntimeError: Dispatch on void
"
data_15: .asciiz "continue"

type_name_table:
	.word	data_1
	.word	data_2
	.word	data_3
	.word	data_4
	.word	data_5
	.word	data_6

proto_table:
	.word	type_1_proto
	.word	type_2_proto
	.word	type_3_proto
	.word	type_4_proto
	.word	type_5_proto
	.word	type_6_proto

type_1_dispatch:
	.word	 L_2
	.word	 L_3
	.word	 L_4
	.word	 L_1

type_1_proto:
	.word	0
	.word	4
	.word	type_1_dispatch
	.word	-1

type_2_dispatch:
	.word	 L_3
	.word	 L_2
	.word	 L_4
	.word	 L_6
	.word	 L_7
	.word	 L_8
	.word	 L_9
	.word	 L_5

type_2_proto:
	.word	1
	.word	4
	.word	type_2_dispatch
	.word	-1

type_3_dispatch:
	.word	 L_3
	.word	 L_2
	.word	 L_4
	.word	 L_11
	.word	 L_12
	.word	 L_13
	.word	 L_10

type_3_proto:
	.word	2
	.word	6
	.word	type_3_dispatch
	.word	default_str
	.word	type_4_proto
	.word	-1

type_4_dispatch:
	.word	 L_3
	.word	 L_2
	.word	 L_4
	.word	 L_14

type_4_proto:
	.word	3
	.word	5
	.word	type_4_dispatch
	.word	0
	.word	-1

type_5_dispatch:
	.word	 L_3
	.word	 L_2
	.word	 L_4
	.word	 L_15

type_5_proto:
	.word	4
	.word	5
	.word	type_5_dispatch
	.word	0
	.word	-1

type_6_dispatch:
	.word	 L_2
	.word	 L_3
	.word	 L_4
	.word	 L_6
	.word	 L_7
	.word	 L_8
	.word	 L_9
	.word	 L_16

type_6_proto:
	.word	5
	.word	9
	.word	type_6_dispatch
	.word	0
	.word	0
	.word	0
	.word	0
	.word	0
	.word	-1
	.text
	.globl main
main:
	jal mem_manager_init
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	jal L_17
	move $t0 $v0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_16
	move $t0 $v0
	addi $sp, $sp, 4
	li $v0, 0
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	li $v0, 10
	syscall
L_1:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	li $t2, 0
	sll $t2 $t2 2
	la $t3, proto_table
	addu $t3 $t3 $t2
	lw $t3, 0($t3)
	lw $a0, 4($t3)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t3
	move $a1 $v0
	jal copy
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	move $t0 $v0
	move $v0 $t0
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_2:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($fp)
	la $t1, data_7 + 0
	li $v0, 4
	move $a0 $t1
	syscall
	lw $a0, 0($t0)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t1 $a0
	li $v0, 4
	move $a0 $t1
	syscall
	la $t1, data_8 + 0
	li $v0, 4
	move $a0 $t1
	syscall
	li $v0, 10
	syscall
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_3:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	lw $t0, 0($fp)
	lw $a0, 0($t0)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t0 $a0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_4:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	lw $t0, 0($fp)
	lw $a0, 4($t0)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t0
	move $a1 $v0
	jal copy
	move $t0 $v0
	move $v0 $t0
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_5:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $t9, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t9, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	li $t9, 1
	sll $t9 $t9 2
	la $t5, proto_table
	addu $t5 $t5 $t9
	lw $t5, 0($t5)
	lw $a0, 4($t5)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t5
	move $a1 $v0
	jal copy
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	lw $t9, 0($sp)
	addi $sp, $sp, 4
	move $t0 $v0
	move $v0 $t0
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	lw $t9, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_6:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t1, 0($fp)
	lw $t0, 4($fp)
	lw $a1, 12($t1)
	move $t1 $a1
	li $v0, 4
	move $a0 $t1
	syscall
	move $v0 $t0
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_7:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t1, 0($fp)
	lw $t0, 4($fp)
	lw $a1, 12($t1)
	move $t1 $a1
	li $v0, 1
	move $a0 $t1
	syscall
	move $v0 $t0
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_8:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($fp)
	jal get_string
	move $t0 $v0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_9:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($fp)
	li $v0, 5
	syscall
	move $t0 $v0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_10:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -12
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	lw $t1, 0($fp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	li $t5, 2
	sll $t5 $t5 2
	la $t3, proto_table
	addu $t3 $t3 $t5
	lw $t3, 0($t3)
	lw $a0, 4($t3)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t3
	move $a1 $v0
	jal copy
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	move $t0 $v0
	sw $t1, 12($t0)
	move $a0 $t1
	jal len
	move $t1 $v0
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	jal L_14
	move $t1 $v0
	addi $sp, $sp, 4
	sw $t1, 16($t0)
	move $v0 $t0
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 12
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_11:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	lw $t0, 0($fp)
	lw $a1, 16($t0)
	move $t0 $a1
	move $v0 $t0
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_12:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -24
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t4, 0($fp)
	lw $t0, 4($fp)
	lw $a1, 12($t0)
	move $t1 $a1
	lw $a1, 12($t4)
	move $t3 $a1
	lw $a1, 16($t0)
	move $t2 $a1
	lw $a1, 16($t4)
	move $t0 $a1
	lw $a1, 12($t2)
	move $t2 $a1
	lw $a1, 12($t0)
	move $t0 $a1
	add $t2 $t2 $t0
	move $a0 $t1
	move $a1 $t3
	move $a2 $t2
	jal concat
	move $t0 $v0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $t4, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 24
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_13:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -32
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	lw $t3, 0($fp)
	lw $t2, 4($fp)
	lw $t1, 8($fp)
	lw $a1, 12($t1)
	move $t0 $a1
	lw $a1, 12($t2)
	move $t4 $a1
	lw $a1, 12($t3)
	move $t2 $a1
	lw $a1, 16($t1)
	move $t1 $a1
	add $t3 $t2 $t4
	move $a0 $t1
	move $a1 $t3
	jal less
	move $t1 $v0
	bne $t1 $zero L_19
	j L_20
	L_19:
	li $v0, 4
	la $a0, data_9
	syscall
	li $v0, 10
	syscall
	L_20:
	move $a0 $t0
	move $a1 $t4
	move $a2 $t2
	jal sub_string
	move $t0 $v0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t4, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 32
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_14:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $t6, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	lw $t0, 0($fp)
	addi $sp, $sp, -4
	sw $t6, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	li $t6, 3
	sll $t6 $t6 2
	la $t3, proto_table
	addu $t3 $t3 $t6
	lw $t3, 0($t3)
	lw $a0, 4($t3)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t3
	move $a1 $v0
	jal copy
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t6, 0($sp)
	addi $sp, $sp, 4
	move $t1 $v0
	sw $t0, 12($t1)
	move $v0 $t1
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t6, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_15:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	lw $t0, 0($fp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	li $t3, 4
	sll $t3 $t3 2
	la $t2, proto_table
	addu $t2 $t2 $t3
	lw $t2, 0($t2)
	lw $a0, 4($t2)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t2
	move $a1 $v0
	jal copy
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	move $t1 $v0
	sw $t0, 12($t1)
	move $v0 $t1
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_16:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	lw $t0, 0($fp)
	li $a0, 0
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_17:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	li $t1, 5
	sll $t1 $t1 2
	la $t0, proto_table
	addu $t0 $t0 $t1
	lw $t0, 0($t0)
	lw $a0, 4($t0)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t0
	move $a1 $v0
	jal copy
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	move $t1 $v0
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	jal L_18
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t1
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_18:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -440
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t7, 0($sp)
	addi $sp, $sp, -4
	sw $t6, 0($sp)
	lw $t2, 0($fp)
	la $t0, data_10 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t2)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 12
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	li $a0, 2
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	sw $t0, 12($t2)
	lw $a1, 12($t2)
	move $t0 $a1
	sw $t0, 16($t2)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $t6, 0($sp)
	li $t3, 3
	sll $t3 $t3 2
	la $t6, proto_table
	addu $t6 $t6 $t3
	lw $t6, 0($t6)
	lw $a0, 4($t6)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t6
	move $a1 $v0
	jal copy
	lw $t6, 0($sp)
	addi $sp, $sp, 4
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	move $t0 $v0
	sw $t0, 20($t2)
	li $a0, 500
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	sw $t0, 24($t2)
	L_21:
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_22
	j L_46
	L_22:
	lw $a1, 16($t2)
	move $t0 $a1
	lw $a1, 12($t0)
	move $t3 $a1
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	add $t0 $t3 $t0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	sw $t0, 16($t2)
	li $a0, 2
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	sw $t0, 20($t2)
	L_23:
	lw $a1, 16($t2)
	move $t4 $a1
	lw $a1, 20($t2)
	move $t0 $a1
	lw $a1, 12($t0)
	move $t0 $a1
	lw $a1, 20($t2)
	move $t3 $a1
	lw $a1, 12($t3)
	move $t3 $a1
	mul $t0 $t0 $t3
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t4)
	move $t3 $a1
	lw $a1, 12($t0)
	move $t0 $a1
	move $a0 $t3
	move $a1 $t0
	jal less
	move $t0 $v0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_24
	j L_25
	L_24:
	li $a0, 0
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	j L_35
	L_25:
	lw $a1, 16($t2)
	move $t0 $a1
	lw $a1, 12($t0)
	move $t3 $a1
	lw $a1, 20($t2)
	move $t0 $a1
	lw $a1, 12($t0)
	move $t4 $a1
	lw $a1, 16($t2)
	move $t0 $a1
	lw $a1, 12($t0)
	move $t6 $a1
	lw $a1, 20($t2)
	move $t0 $a1
	lw $a1, 12($t0)
	move $t0 $a1
	move $a0 $t0
	li $a1, 0
	jal eqs
	move $t5 $v0
	bne $t5 $zero L_26
	j L_27
	L_26:
	li $v0, 4
	la $a0, data_11
	syscall
	li $v0, 10
	syscall
	L_27:
	div $t6 $t0
	mflo $t0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	mul $t0 $t4 $t0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	sub $t0 $t3 $t0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_14
	move $t3 $v0
	addi $sp, $sp, 4
	li $a0, 0
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t6 $v0
	addi $sp, $sp, 4
	lw $a0, 0($t3)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t7 $a0
	la $t0, type_name_table
	addiu $t0 $t0 12
	lw $t0, 0($t0)
	la $t5, type_name_table
	addiu $t5 $t5 16
	lw $t5, 0($t5)
	la $t4, type_name_table
	addiu $t4 $t4 8
	lw $t4, 0($t4)
	move $a0 $t7
	move $a1 $t0
	jal eqs
	move $t0 $v0
	bne $t0 $zero L_28
	move $a0 $t7
	move $a1 $t5
	jal eqs
	move $t0 $v0
	bne $t0 $zero L_28
	move $a0 $t7
	move $a1 $t4
	jal eqs
	move $t0 $v0
	bne $t0 $zero L_29
	j L_30
	L_28:
	lw $a1, 12($t3)
	move $t0 $a1
	lw $a1, 12($t6)
	move $t3 $a1
	move $a0 $t0
	move $a1 $t3
	jal eqs
	move $t0 $v0
	j L_31
	L_29:
	lw $a1, 12($t3)
	move $t0 $a1
	lw $a1, 12($t6)
	move $t3 $a1
	move $a0 $t0
	move $a1 $t3
	jal eq_string
	move $t0 $v0
	j L_31
	L_30:
	move $a0 $t3
	move $a1 $t6
	jal eqs
	move $t0 $v0
	L_31:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_32
	j L_33
	L_32:
	li $a0, 0
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	j L_34
	L_33:
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	L_34:
	move $t0 $t0
	L_35:
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_36
	j L_37
	L_36:
	lw $a1, 20($t2)
	move $t0 $a1
	lw $a1, 12($t0)
	move $t3 $a1
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	add $t0 $t3 $t0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	sw $t0, 20($t2)
	j L_23
	L_37:
	lw $a1, 16($t2)
	move $t4 $a1
	lw $a1, 20($t2)
	move $t0 $a1
	lw $a1, 12($t0)
	move $t3 $a1
	lw $a1, 20($t2)
	move $t0 $a1
	lw $a1, 12($t0)
	move $t0 $a1
	mul $t0 $t3 $t0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_14
	move $t3 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t4)
	move $t0 $a1
	lw $a1, 12($t3)
	move $t3 $a1
	move $a0 $t0
	move $a1 $t3
	jal less
	move $t0 $v0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_38
	j L_39
	L_38:
	lw $a1, 16($t2)
	move $t0 $a1
	sw $t0, 12($t2)
	lw $a1, 12($t2)
	move $t0 $a1
	move $t0 $t0
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t2)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 16
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	la $t0, data_12 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t2)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 12
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	move $t0 $t0
	j L_40
	L_39:
	li $a0, 0
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	L_40:
	lw $a1, 24($t2)
	move $t3 $a1
	lw $a1, 16($t2)
	move $t0 $a1
	lw $a1, 12($t3)
	move $t3 $a1
	lw $a1, 12($t0)
	move $t0 $a1
	move $a0 $t3
	move $a1 $t0
	jal less_eq
	move $t0 $v0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_41
	j L_44
	L_41:
	la $t0, data_13 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t0 $v0
	addi $sp, $sp, 4
	move $t3 $t0
	move $a0 $t3
	li $a1, 0
	jal eqs
	move $t0 $v0
	bne $t0 $zero L_42
	j L_43
	L_42:
	li $v0, 4
	la $a0, data_14
	syscall
	li $v0, 10
	syscall
	L_43:
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t0, 0($t3)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 4
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	j L_45
	L_44:
	la $t0, data_15 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	L_45:
	j L_21
	L_46:
	sw $t1, 28($t2)
	lw $t6, 0($sp)
	addi $sp, $sp, 4
	lw $t7, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $t4, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 440
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra


    
    alloc_size       = 2048
    free_list = 0
    header_size = 12
    header_size_slot = 0
    header_next_slot = 4
    header_reachable_slot = 8
    init_alloc_size = 28
    int_type = 0
    meta_data_obj_size = 4
    neg_header_size = -12
    new_line = 10
    obj_mark = -1
    obj_extended = -2
    reachable = 1
    state_size = 4
    stack_base = -4
    string_size_treshold = 1024
    string_type = 0
    total_alloc_size =  2060
    num_type = 0
    used_list = header_size

verify_obj:
                addiu $sp $sp -20
                sw $t0 0($sp)
                sw $t1 4($sp)
                sw $t2 8($sp)
                sw $t3 12($sp)
                sw $a0 16($sp)

                move $t0 $a0

                li $v0 9
                move $a0 $zero
                syscall

                addiu $t1 $v0 -4    

                
                blt $t0 $gp verify_obj_not_obj
                bgt $t0 $t1 verify_obj_not_obj
                lw $t2 0($t0)
                blt $t2 $zero verify_obj_not_obj
                la $t3 num_type
                lw $t3 0($t3)
                bge $t2 $t3 verify_obj_not_obj

                addiu $t0 $t0 4
                blt $t0 $gp verify_obj_not_obj
                bgt $t0 $t1 verify_obj_not_obj
                lw $t2 0($t0)   

                addiu $t0 $t0 8
                

                li $t3 meta_data_obj_size
                sub $t2 $t2 $t3 
                sll $t2 $t2 2
                addu $t0 $t0 $t2
                
                
                blt $t0 $gp verify_obj_not_obj
                bgt $t0 $t1 verify_obj_not_obj
                lw $t2 0($t0)
                beq $t2 obj_mark verify_obj_is_obj
                beq $t2 obj_extended verify_obj_is_obj

verify_obj_not_obj:
                li $v0 0
                j verify_obj_finish

verify_obj_is_obj:
                li $v0 1

verify_obj_finish:
                lw $t0 0($sp)
                lw $t1 4($sp)
                lw $t2 8($sp)
                lw $t3 12($sp)
                lw $a0 16($sp)
                addiu $sp $sp 20

                jr $ra

concat:
                addiu $sp $sp -24
                sw $t0 0($sp)
                sw $t1 4($sp)
                sw $t2 8($sp)
                sw $a0 12($sp)
                sw $a1 16($sp)
                sw $ra 20($sp)

                move $t0 $a0
                move $t1 $a1


                addiu $a0 $a2 1
                li $t2 4
                div $a0 $t2
                mfhi $a0
                bne $a0 $zero concat_allign_size
                addiu $a0 $a2 1

concat_size_alligned:
                jal malloc
                move $t2 $v0
                j concat_copy_first_cycle

concat_allign_size:
                sub $t2 $t2 $a0
                add $a0 $a2 $t2
                addiu $a0 $a0 1
                j concat_size_alligned

concat_copy_first_cycle:
                lb $a0 0($t0)
                beq $a0 $zero concat_copy_second_cycle
                sb $a0 0($t2)
                addiu $t0 $t0 1
                addiu $t2 $t2 1
                j concat_copy_first_cycle

concat_copy_second_cycle:
                lb $a0 0($t1)
                beq $a0 $zero concat_finish
                sb $a0 0($t2)
                addiu $t1 $t1 1
                addiu $t2 $t2 1
                j concat_copy_second_cycle

concat_finish:
                sb $zero 0($t2)
                lw $t0 0($sp)
                lw $t1 4($sp)
                lw $t2 8($sp)
                lw $a0 12($sp)
                lw $a1 16($sp)
                lw $ra 20($sp)
                addiu $sp $sp 24

                jr $ra

copy:
                addiu $sp $sp -16
                sw $a0 0($sp)
                sw $a1 4($sp)
                sw $a2 8($sp)
                sw $t0 12($sp)

copy_cycle:
                beq $a2 $zero copy_finish
                lw $t0 0($a0)
                sw $t0 0($a1)
                addiu $a0 $a0 4
                addiu $a1 $a1 4
                addi $a2 $a2 -4
                j copy_cycle

copy_finish:
                lw $a0 0($sp)
                lw $a1 4($sp)
                lw $a2 8($sp)
                lw $t0 12($sp)
                addiu $sp $sp 16

                jr $ra

eqs:
                beq $a0 $a1 eqs_eq
                li $v0 0
                j eqs_finish

eqs_eq:
                li $v0 1

eqs_finish:
                jr $ra

eq_string:
                addiu $sp $sp -16
                sw $t0 0($sp)
                sw $t1 4($sp)
                sw $t2 8($sp)
                sw $t3 12($sp)

                move $t0 $a0
                move $t1 $a1

eq_string_cycle:
                lb $t2 0($t0)
                lb $t3 0($t1)
                bne $t2 $t3 eq_string_not_eq
                beq $t2 $zero eq_string_eq

                addiu $t0 $t0 1
                addiu $t1 $t1 1
                j eq_string_cycle

eq_string_not_eq:
                move $v0 $zero
                j eq_string_finish

eq_string_eq:
                li $v0 1

eq_string_finish:
                lw $t0 0($sp)
                lw $t1 4($sp)
                lw $t2 8($sp)
                lw $t3 12($sp)
                addiu $sp $sp 16

                jr $ra

extend_block:
                addiu $sp $sp -16
                sw $t0 0($sp)
                sw $t1 4($sp)
                sw $t2 8($sp)
                sw $t3 12($sp)

                
                addiu $t0 $gp free_list     

                beq $t0 $a0 extend_block_finish  
                move $t0 $a0

                lw $t1 header_next_slot($t0)
                lw $t2 header_size_slot($t0)
                move $t3 $t2
                addiu $t2 $t2 header_size
                addu $t2 $t2 $t0
                beq $t2 $t1 extend_block_extend
                j extend_block_finish

extend_block_extend:
                lw $t2 header_size_slot($t1)
                addi $t2 $t2 header_size
                add $t2 $t2 $t3
                sw $t2 header_size_slot($t0)
                lw $t1 header_next_slot($t1)
                sw $t1 header_next_slot($t0)

extend_block_finish:
                lw $t0 0($sp)
                lw $t1 4($sp)
                lw $t2 8($sp)
                lw $t3 12($sp)
                addiu $sp $sp 16

                jr $ra

extend_heap:
                addiu $sp $sp -12
                sw $a0 0($sp)
                sw $a1 4($sp)
                sw $t0 8($sp)

                
                li $v0 9
                addiu $a0 $a1 header_size
                syscall
                
                
                move $t0 $a1 
                sw $t0 header_size_slot($v0)
                sw $zero header_next_slot($v0)
                sw $zero header_reachable_slot($v0)

               
                lw $t0, 0($sp)
                sw $v0 header_next_slot($t0)

                move $a0 $t0
                lw $a1 4($sp)
                lw $t0 8($sp)
                addiu $sp $sp 12

                jr $ra

free_block:
                addiu $sp $sp -28
                sw $t0 0($sp)
                sw $t1 4($sp)
                sw $t2 8($sp)
                sw $a0 12($sp)
                sw $ra 16($sp)
                sw $t3 20($sp)
                sw $t4 24($sp)

                move $t0 $a0

                addiu $t1 $gp free_list

                addiu $t3 $gp used_list

free_block_cycle_used_list:
                lw $t4 header_next_slot($t3)
                beq $t4 $t0 free_block_cycle_free_list
                move $t3 $t4
                j free_block_cycle_used_list

free_block_cycle_free_list:
                lw $t2 header_next_slot($t1)
                beq $t2 $zero free_block_founded_prev
                bge $t2 $t0 free_block_founded_prev
                move $t1 $t2
                j free_block_cycle_free_list

free_block_founded_prev:  
                lw $t4 header_next_slot($t0)
                sw $t4 header_next_slot($t3)
                
                
                sw $t2 header_next_slot($t0)
                sw $t0 header_next_slot($t1)

free_block_finish:
    
                move $a0 $t0
                jal extend_block
                move $a0 $t1
                jal extend_block

                lw $t0 0($sp)
                lw $t1 4($sp)
                lw $t2 8($sp)
                lw $a0 12($sp)
                lw $ra 16($sp)
                lw $t3 20($sp)
                lw $t4 24($sp)
                addiu $sp $sp 28

                jr $ra

get_gc:
                addiu $sp $sp -24
                sw $t0 0($sp)
                sw $t1 4($sp)
                sw $t2 8($sp)
                sw $t3 12($sp)
                sw $a0 16($sp)
                sw $ra 20($sp)

                li $t3 reachable    
                addiu $t0 $sp 20    
                lw $t1 stack_base($gp)  

                li $t2 1

get_gc_cycle:

                addiu $t0 $t0 4
                beq $t0 $t1 get_gc_dfs      
                
                lw $a0 0($t0)
                jal verify_obj
                
                bne $v0 $t2 get_gc_cycle

                addiu $a0 $a0 neg_header_size
                sw $t3 header_reachable_slot($a0)
                
                j get_gc_cycle

get_gc_dfs:
                addiu $t1 $gp used_list

get_gc_outer_cycle:
                lw $t1 header_next_slot($t1)
                beq $t1 $zero get_gc_free
                lw $t2 header_reachable_slot($t1)
                beq $t2 reachable get_gc_extend
                j get_gc_outer_cycle

get_gc_extend:
                addiu $a0 $t1 header_size    
                jal get_gc_rec_extend
                j get_gc_outer_cycle

get_gc_free:
                addiu $t0 $gp used_list
                lw $t0 header_next_slot($t0)

get_gc_free_cycle:
                beq $t0 $zero get_gc_finish
                lw $t1 header_reachable_slot($t0)
                bne $t1 reachable get_gc_free_cycle_free
                sw $zero header_reachable_slot($t0)
                move $a0 $t0
                jal verify_obj
                beq $v0 $zero get_gc_free_cycle
                li $t1 obj_mark
                addiu $t2 $t0 header_size
                lw $t3 4($t2)
                sll $t3 $t3 2
                addu $t2 $t2 $t3
                sw $t1 -4($t2)
                lw $t0 header_next_slot($t0)
                j get_gc_free_cycle

get_gc_free_cycle_free:
                move $a0 $t0
                lw $t0 header_next_slot($t0)
                jal free_block
                j get_gc_free_cycle

get_gc_finish:
                lw $t0 0($sp)
                lw $t1 4($sp)
                lw $t2 8($sp)
                lw $t3 12($sp)
                lw $a0 16($sp)
                lw $ra 20($sp)
                addiu $sp $sp 24

                jr $ra

get_gc_rec_extend:
                addiu $sp $sp -16
                sw $a0 0($sp)
                sw $t0 4($sp)
                sw $t1 8($sp)
                sw $ra 12($sp)
                
                jal verify_obj 
                beq $v0 $zero get_gc_rec_extend_finish

                lw $t0 4($a0)
                sll $t0 $t0 2
                addiu $t0 $t0 -4
                addu $t0 $a0 $t0
                lw $t1 0($t0)   
                beq $t1 obj_extended get_gc_rec_extend_finish
                
                
                li $t1 reachable
                addiu $a0 $a0 neg_header_size
                sw $t1 header_reachable_slot($a0)
                addiu $a0 $a0 header_size 

                
                li $t1 obj_extended
                sw $t1 0($t0)

                lw $t0 0($a0)   
                
                
                la $t1 int_type
                lw $t1 0($t1)
                beq $t0 $t1 get_gc_rec_extend_finish

                la $t1 string_type
                lw $t1 0($t1)
                beq $t0 $t1 get_gc_rec_extend_string_obj

                lw $t0 4($a0)
                li $t1 meta_data_obj_size
                sub $t0 $t0 $t1
                
                addiu $t1 $a0 12

get_gc_rec_extend_attr_cycle:
                beq $t0 $zero get_gc_rec_extend_finish
                lw $a0 0($t1)
                jal get_gc_rec_extend
                addiu $t1 $t1 4
                sub $t0 $t0 1
                j get_gc_rec_extend_attr_cycle

get_gc_rec_extend_string_obj:
                lw $t0 8($a0)
                addiu $t0 $t0 neg_header_size
                li $t1 reachable
                sw $t1 header_reachable_slot($t0)

get_gc_rec_extend_finish:
                lw $a0 0($sp)
                lw $t0 4($sp)
                lw $t1 8($sp)
                lw $ra 12($sp)
                addiu $sp $sp 16

                jr $ra

less_eq:
                ble $a0 $a1 less_eq_true
                li $v0 0
                j less_eq_finish

less_eq_true:
                li $v0 1

less_eq_finish:
                jr $ra

less:
                blt $a0 $a1 less_true
                li $v0 0
                j less_finish

less_true:
                li $v0 1

less_finish:
                jr $ra

len:
                addiu $sp $sp -8
                sw $t0 0($sp)
                sw $t1 4($sp)

                move $t0 $a0
                move $v0 $zero

len_cycle:
                lb $t1 0($t0)
                beq $t1 $zero len_finish
                addi $v0 $v0 1
                addiu $t0 $t0 1
                j len_cycle

len_finish:
                lw $t0 0($sp)
                lw $t1 4($sp)
                addiu $sp $sp 8

                jr $ra

malloc:
                move $v0 $zero
                addiu $sp $sp -28
                sw $t1 0($sp)
                sw $t0 4($sp)
                sw $a0 8($sp)
                sw $a1 12($sp)
                sw $ra 16($sp)
                sw $t2 20($sp)
                sw $t3 24($sp)
                
                addiu $t0 $gp free_list
                j malloc_cycle

malloc_finish:
                move $a0 $v0
                lw $a1 8($sp)                  
                jal divide_block

                lw $t1 header_next_slot($v0)
                sw $t1 header_next_slot($t3)

                addiu $t1 $gp used_list
                lw $a0 header_next_slot($t1)

                sw $a0 header_next_slot($v0)
                sw $v0 header_next_slot($t1)
                
                addiu $v0 $v0 header_size

                lw $t3 24($sp)
                lw $t2 20($sp)
                lw $ra 16($sp)
                lw $a1 12($sp)
                lw $a0 8($sp)
                lw $t0 4($sp)
                lw $t1 0($sp)
                addiu $sp $sp 28

                jr $ra

malloc_cycle:
                move $t2 $t0                        
                lw $t0 header_next_slot($t0)        
                beq $t0 $zero malloc_search_finish     
                j malloc_verify_valid_block

malloc_search_finish:
                beq $v0 $zero malloc_alloc_new_block 
                j malloc_finish

malloc_alloc_new_block:
                li $t1 alloc_size               
                move $t3 $t2
                move $a1 $a0                    
                move $a0 $t2                    
                bge $a1 $t1 malloc_big_block    
                li $a1 alloc_size        
                jal extend_heap
                
                j malloc_finish

malloc_big_block:
                jal extend_heap
                j malloc_finish

malloc_verify_valid_block:
                lw $t1 header_size_slot($t0)             
                bge $t1 $a0 malloc_valid_block    
                j malloc_cycle

malloc_valid_block:
                beq $v0 $zero malloc_first_valid_block    
                bge $t1 $v1 malloc_cycle                    
                move $v0 $t0                        
                move $v1 $t1  
                move $t3 $t2
                j malloc_cycle

malloc_first_valid_block:
                move $v0 $t0                        
                move $v1 $t1                        
                move $t3 $t2 
                j malloc_cycle

mem_manager_init:
                addiu $sp $sp -16
                sw $v0 0($sp)
                sw $a0 4($sp)
                sw $a1 8($sp)
                sw $ra 12($sp)
                li $v0 9
                li $a0 init_alloc_size
                syscall
                move $gp $v0
                addiu $gp $gp state_size

                sw $zero header_size_slot($gp)
                sw $zero header_reachable_slot($gp)

                move $a0 $gp
                li $a1 alloc_size
                jal extend_heap

                addiu $a0 $a0 header_size
                sw $zero header_size_slot($a0)
                sw $zero header_next_slot($a0)
                sw $zero header_reachable_slot($a0)



                lw $v0 0($sp)
                lw $a0 4($sp)
                lw $a1 8($sp)
                lw $ra 12($sp)
                addiu $sp $sp 16

                sw $sp stack_base($gp)

                jr $ra

get_string:
                addiu $sp $sp -36
                sw $t0 0($sp)
                sw $t1 4($sp)
                sw $t2 8($sp)
                sw $t3 12($sp)
                sw $t4 16($sp)
                sw $t5 20($sp)
                sw $a0 24($sp)
                sw $a1 28($sp)
                sw $ra 32($sp)
                
                addiu $t0 $gp free_list
                move $t1 $zero
                move $t2 $t0

get_string_larger_block_cycle:
                lw $t0 header_next_slot($t0)
                beq $t0 $zero get_string_reading
                lw $t3 header_size_slot($t0)
                bge $t1 $t3 get_string_larger_block_cycle
                move $t1 $t3
                move $t2 $t0
                j get_string_larger_block_cycle

get_string_reading:
                beq $t1 $zero get_string_new_block
                move $a1 $t1
                li $v0 8
                addiu $a0 $t2 header_size
                syscall
                move $t0 $a0
                move $t1 $zero

get_string_look_nl:
                lb $t2 0($t0)
                beq $t2 new_line get_string_nl_founded
                beq $t2 $zero get_string_zero_founded
                addi $t1 $t1 1
                addi $t0 $t0 1
                j get_string_look_nl

get_string_zero_founded:
                blt $t1 $t3 get_string_nl_founded
                j get_string_no_nl

get_string_nl_founded:
                sb $zero 0($t0)
                addi $t1 $t1 1
                li $t2 4
                div $t1 $t2
                mfhi $t3
                beq $t3 $zero get_string_nl_founded_alligned
                sub $t2 $t2 $t3
                add $t1 $t1 $t2

get_string_nl_founded_alligned:
                move $a1 $t1
                addiu $a0 $a0 neg_header_size
                jal divide_block
                jal use_block

                addiu $v0 $a0 header_size
                j get_string_finish

get_string_no_nl:
                addi $t1 $t1 1
                blt $t1 string_size_treshold get_string_dup
                addi $t1 $t1 alloc_size
                j get_string_extend_heap

get_string_dup:
	            sll $t1 $t1 1

get_string_extend_heap:
                move $a1 $t1
                move $t0 $a0
                addiu $a0 $gp free_list

get_string_last_block_cycle:
                lw $t1 header_next_slot($a0)
                beq $t1 $zero get_string_last_block_founded
                lw $a0 header_next_slot($a0)
                j get_string_last_block_cycle

get_string_last_block_founded:
                jal extend_heap
                jal extend_block
                lw $t1 header_next_slot($a0)
                bne $t1 $zero get_string_copy_prev
                move $t1 $a0

get_string_copy_prev:
                lw $t3 header_size_slot($t1)
                move $t2 $zero
                move $t5 $t1
                addiu $t1 $t1 header_size

get_string_copy_cycle:
                lb $t4 0($t0)
                beq $t4 $zero get_string_copy_finish
                sb $t4 0($t1)
                addi $t2 $t2 1
                addi $t0 $t0 1
                addi $t1 $t1 1
                j get_string_copy_cycle

get_string_copy_finish:
                sub $t3 $t3 $t2
                move $a0 $t1
                move $a1 $t3
                li $v0 8
                syscall
                move $t0 $a0
                move $t1 $t2
                addiu $a0 $t5 header_size
                j get_string_look_nl

get_string_finish:
                lw $t0 0($sp)
                lw $t1 4($sp)
                lw $t2 8($sp)
                lw $t3 12($sp)
                lw $t4 16($sp)
                lw $t5 20($sp)
                lw $a0 24($sp)
                lw $a1 28($sp)
                lw $ra 32($sp)
                addiu $sp $sp 36

                jr $ra

get_string_new_block:
    addiu $t0 $gp free_list

get_string_new_block_search_last:
                lw $t1 header_next_slot($t0)
                beq $t1 $zero get_string_new_block_create
                move $t0 $t1
                j get_string_new_block_search_last

get_string_new_block_create:
                move $a0 $t0
                li $a1 alloc_size
                jal extend_heap
                jal extend_block
                lw $t2 header_next_slot($a0)
                beq $t2 $zero get_string_new_block_extended
                lw $t1 header_size_slot($t2)
                j get_string_reading

get_string_new_block_extended:
                move $t2 $a0
                lw $t1 header_size_slot($a0)
                j get_string_reading

divide_block:
                addiu $sp $sp -16
                sw $t0 0($sp)
                sw $t1 4($sp)
                sw $a0 8($sp)
                sw $a1 12($sp)

                
                lw $t0 header_size_slot($a0)
                bgt $a1 $t0 divide_block_error_small
                
    
                sub $t0 $t0 $a1
                li $t1 header_size
                ble $t0 $t1 divide_block_same_size

               
                addu $t0 $a0 $a1
                addiu $t0 $t0 header_size     

                
                lw $t1 header_next_slot($a0)    
                sw $t1 header_next_slot($t0)
                sw $t0 header_next_slot($a0)

                lw $t1 header_size_slot($a0)    
                sub $t1 $t1 $a1

                addi $t1 $t1 neg_header_size
                sw $t1 header_size_slot($t0)
                sw $a1 header_size_slot($a0)
                move $v0 $a0
                j divide_block_finish

divide_block_same_size:
                move $v0 $a0
                j divide_block_finish

divide_block_error_small:
                j divide_block_finish

divide_block_finish:
                lw $t0 0($sp)
                lw $t1 4($sp)
                lw $a0 8($sp)
                lw $a1 12($sp)
                addiu $sp $sp 16

                jr $ra

sub_string:
                addiu $sp $sp -24
                sw $t0 0($sp)
                sw $t1 4($sp)
                sw $t2 8($sp)
                sw $t3 12($sp)
                sw $a0 16($sp)
                sw $ra 20($sp)

                move $t0 $a0
                li $t1 4
                addiu $t3 $a2 1
                div $t3 $t1
            
                mfhi $t2
                bne $t2 $zero sub_string_allign_size
                move $t1 $t3
                j sub_string_new_block

sub_string_allign_size:
                sub $t1 $t1 $t2
                add $t1 $t1 $t3

sub_string_new_block:
                move $a0 $t1
                jal malloc
                move $t3 $v0
                move $t1 $zero
                addu $t0 $t0 $a1

sub_string_copy_cycle:
                beq $t1 $a2 sub_string_finish
                lb $t2 0($t0)
                sb $t2 0($t3)
                addiu $t0 $t0 1
                addiu $t3 $t3 1
                addiu $t1 $t1 1
                j sub_string_copy_cycle

sub_string_finish:
                sb $zero 0($t3)
                lw $t0 0($sp)
                lw $t1 4($sp)
                lw $t2 8($sp)
                lw $t3 12($sp)
                lw $a0 16($sp)
                lw $ra 20($sp)
                addiu $sp $sp 24

                jr $ra

use_block:
    addiu $sp $sp -12
    sw $t0 0($sp)
    sw $t1 4($sp)
    sw $t2 8($sp)

    addiu $t0 $gp free_list

use_block_cycle:
                move $t1 $t0
                lw $t0 header_next_slot($t0)
                beq $t0 $zero use_block_finish
                beq $t0 $a0 use_block_founded
                j use_block_cycle

use_block_founded:
                lw $t2 header_next_slot($t0)
                sw $t2 header_next_slot($t1)

                addiu $t1 $gp used_list
                lw $t2 header_next_slot($t1)
                sw $t0 header_next_slot($t1)
                sw $t2 header_next_slot($t0)

use_block_finish:
                lw $t0 0($sp)
                lw $t1 4($sp)
                lw $t2 8($sp)
                addiu $sp $sp 12

                jr $ra

